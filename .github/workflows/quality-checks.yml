name: Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run MyPy (Static Type Checking)
      run: |
        cd backend
        mypy app/ --show-error-codes --ignore-missing-imports
    
    - name: Run Ruff (Fast Python Linter)
      run: |
        cd backend
        ruff check app/ tests/ --output-format=github
    
    - name: Run Black (Code Formatter Check)
      run: |
        cd backend
        black --check --diff app/ tests/
    
    - name: Run isort (Import Sorter Check)
      run: |
        cd backend
        isort --check-only --diff app/ tests/
    
    - name: Run Flake8 (Style Guide Enforcement)
      run: |
        cd backend
        flake8 app/ tests/
    
    - name: Run Security Check (Bandit)
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Run Import Analysis
      run: |
        cd backend
        python -m unimport --check --diff app/
    
    - name: Run Tests with Coverage
      run: |
        cd backend
        pytest tests/ --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Run TypeScript Check
      run: |
        cd frontend
        npx tsc --noEmit
    
    - name: Run Prettier Check
      run: |
        cd frontend
        npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"
    
    - name: Run Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build Check
      run: |
        cd frontend
        npm run build

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Integration Tests
      run: |
        cd backend
        pytest tests/integration/ -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
