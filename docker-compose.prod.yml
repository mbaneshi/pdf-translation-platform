version: '3.8'

services:
  # Caddy reverse proxy and HTTPS termination
  caddy:
    image: caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - ./uploads:/var/www/uploads
      - ./logs:/var/log/caddy
    environment:
      - CADDY_INGRESS_NETWORKS=pdf_translation_platform_default
    networks:
      - pdf_translation_platform_default
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
      - flower

  # PostgreSQL Database with Enhanced Configuration
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pdf_translate
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d pdf_translate"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pdf_translation_platform_default
    restart: unless-stopped
    ports:
      - "5432:5432"  # Expose for development access

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pdf_translation_platform_default
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://user:password@postgres/pdf_translate
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
      - DEBUG=false
      - CORS_ORIGINS=https://pdf.edcopo.info,https://apipdf.edcopo.info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - pdf_translation_platform_default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build: ./frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://pdf.edcopo.info/api
      - NEXT_PUBLIC_APP_URL=https://pdf.tonmastery.xyz
    depends_on:
      - backend
    networks:
      - pdf_translation_platform_default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery-worker:
    build: ./backend
    command: celery -A app.workers.celery_worker.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://user:password@postgres/pdf_translate
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
    depends_on:
      - backend
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - pdf_translation_platform_default
    restart: unless-stopped
    deploy:
      replicas: 2

  # Celery Flower for Monitoring
  flower:
    build: ./backend
    command: celery -A app.workers.celery_worker.celery_app flower --port=5555 --broker=redis://redis:6379/0
    environment:
      - REDIS_URL=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=admin:${FLOWER_PASSWORD}
    depends_on:
      - redis
      - celery-worker
    networks:
      - pdf_translation_platform_default
    restart: unless-stopped

  # Optional: Database Backup Service
  db-backup:
    image: postgres:13-alpine
    environment:
      - PGPASSWORD=password
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data
    command: |
      sh -c '
        while true; do
          pg_dump -h postgres -U user pdf_translate > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name "backup_*.sql" -mtime +7 -delete
          sleep 86400
        done
      '
    depends_on:
      - postgres
    networks:
      - pdf_translation_platform_default
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:

networks:
  pdf_translation_platform_default:
    driver: bridge
