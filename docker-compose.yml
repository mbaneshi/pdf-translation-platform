name: pdftr

services:
  # PostgreSQL Database with Enhanced Configuration
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pdftr
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    # Do not publish Postgres port on host; internal only
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d pdftr"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pdftr_default
    restart: unless-stopped

  # Redis Cache and Message Broker
  cache:
    image: redis:7-alpine
    # Do not publish Redis port on host; internal only
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pdftr_default
    restart: unless-stopped

  # FastAPI Backend
  api:
    build: ./backend
    ports:
      - "8000:8000"  # Expose API on localhost:8000
    environment:
      - DATABASE_URL=postgresql://user:password@db/pdftr
      - REDIS_URL=redis://cache:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_CHAT_MODEL=${OPENAI_CHAT_MODEL:-gpt-4o-mini}
      - USE_CHUNKING=${USE_CHUNKING:-false}
      - ENVIRONMENT=production
      - DEBUG=false
      - CORS_ORIGINS=https://pdf.edcopo.info,https://apipdf.edcopo.info
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - pdftr_default
      - traefik-proxy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request,sys; sys.exit(0 if urllib.request.urlopen(\"http://localhost:8000/health\").getcode()==200 else 1)' "]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      traefik.enable: "true"
      traefik.docker.network: traefik-proxy
      traefik.http.routers.pdftr-api.rule: "Host(`apipdf.edcopo.info`)"
      traefik.http.routers.pdftr-api.entrypoints: "websecure"
      traefik.http.routers.pdftr-api.tls: "true"
      traefik.http.routers.pdftr-api.tls.certresolver: "cloudflare"
      traefik.http.services.pdftr-api.loadbalancer.server.port: "8000"

  # Next.js Frontend
  web:
    build: 
      context: ./frontend
      args:
        NEXT_PUBLIC_API_URL: https://apipdf.edcopo.info
        NEXT_PUBLIC_APP_URL: https://pdf.edcopo.info
    # No host port; Traefik routes traffic
    environment:
      - NODE_ENV=production
      # Both browser and server-side use dedicated API subdomain via Traefik
      - NEXT_PUBLIC_API_URL=https://apipdf.edcopo.info
      - NEXT_PUBLIC_APP_URL=https://pdf.edcopo.info
    depends_on:
      - api
    networks:
      - pdftr_default
      - traefik-proxy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000',r=>process.exit(r.statusCode>=200&&r.statusCode<500?0:1)).on('error',()=>process.exit(1))\" "]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      traefik.enable: "true"
      traefik.docker.network: traefik-proxy
      traefik.http.routers.pdftr-web.rule: "Host(`pdf.edcopo.info`)"
      traefik.http.routers.pdftr-web.entrypoints: "websecure"
      traefik.http.routers.pdftr-web.tls: "true"
      traefik.http.routers.pdftr-web.tls.certresolver: "cloudflare"
      traefik.http.services.pdftr-web.loadbalancer.server.port: "3000"

  # Celery Worker for Background Tasks
  worker:
    build: ./backend
    command: celery -A app.workers.celery_worker.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://user:password@db/pdftr
      - REDIS_URL=redis://cache:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_CHAT_MODEL=${OPENAI_CHAT_MODEL:-gpt-4o-mini}
      - USE_CHUNKING=${USE_CHUNKING:-true}
      - ENVIRONMENT=production
    depends_on:
      - api
      - cache
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - pdftr_default
    restart: unless-stopped
    deploy:
      replicas: 2

  # Celery Flower for Monitoring
  monitor:
    build: ./backend
    command: celery -A app.workers.celery_worker.celery_app flower --port=5555
    # No host port; Traefik routes traffic
    environment:
      - REDIS_URL=redis://cache:6379/0
      - CELERY_BROKER_URL=redis://cache:6379/0
    depends_on:
      - cache
      - worker
    networks:
      - pdftr_default
      - traefik-proxy
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: traefik-proxy
      traefik.http.routers.pdftr-flower.rule: "Host(`flower.edcopo.info`)"
      traefik.http.routers.pdftr-flower.entrypoints: "websecure"
      traefik.http.routers.pdftr-flower.tls: "true"
      traefik.http.routers.pdftr-flower.tls.certresolver: "cloudflare"
# Temporarily disable auth for testing
      # traefik.http.routers.pdftr-flower.middlewares: "flower-basic-auth"
      # traefik.http.middlewares.flower-basic-auth.basicauth.users: "admin:$$2y$$05$$HjzQJ7r8zmi1nuRiYQYZBOUM3lvhdbQbFX5KSiWhNXAn5gWTYaRfy"
      traefik.http.services.pdftr-flower.loadbalancer.server.port: "5555"

  

  # Optional: Database Backup Service
  backup:
    image: postgres:15-alpine
    environment:
      - PGPASSWORD=password
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data
    command: |
      sh -c '
        while true; do
          pg_dump -h db -U user pdftr > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name "backup_*.sql" -mtime +7 -delete
          sleep 86400
        done
      '
    depends_on:
      - db
    networks:
      - pdftr_default
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  pdftr_default:
    driver: bridge
  traefik-proxy:
    external: true
